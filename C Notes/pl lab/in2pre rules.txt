Expression Conversion from infix to prefix

Rules
1) Know the priorities
2) U need 2 Stacks
All Operators go into operator stack
All Operands go into operand stack
3) Read and process the entire infix expression
4) Incoming operator can be pushed
    a) in an empty stack
    b) abv a low priority in stack operator
    c) abv opening bracket in stack
6) If incoming operator priority is
less or equal to the instack operator
priority then 
a) first pop out all the high/equal priority
operators from stack
b) finally push in the incoming operator

7) when instack operator is ^ and
incoming operator is ^ then donot
compare priorities, push in the incoming
^ above the instack ^.

8) If one operator is poped then we must
pop 2 operands.
First poped operand is opnd2
Next poped operand is opnd1
Form the result as
   "opOpnd1Opnd2"
Push the result back into operand stack.

9) A closing bracket never goes into the stack
When it is found then pop out all the operators
until opening bracket comes out.
Pop and discard the opening bracket. 
 
10) When expression traversal is complete
then pop out all the instack operators. 

11)after step 10 operand stack contains 
a single val that is the prefix of infix. 
Pop it out and return it.
-------------------------------------
Prefix Expression Evaluation

1) U need a float stack
2) Read and process the entire prefix expression
from right to left
3) detect incoming element is operator or operand
4) for operands, scan value and push
5) for operators, pop out 2 values
first val is no1
second val is no2
process no1 and no2 as per operator
push in the result
6) after expression traversal is complete
stack contains a single val that is the
ans. Pop it out and return it.